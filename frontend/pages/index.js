import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { HiSearch } from "react-icons/hi";
import { useProductsData } from "../hooks/useProductsHook";
import React from "react";
import BounceLoader from "react-spinners/BounceLoader";

export default function Home() {
  let [color, setColor] = React.useState("#4169E1");
  let [loading, setLoading] = React.useState(true);

  const [name, setName] = React.useState("");
  const [pageNo, setPageNo] = React.useState(1);
  const [limit, setLimit] = React.useState(9);

  const productsDataOnSuccess = (data) => {
    console.log(
      "Perform side effect after data fetching like setting an alert"
    );
  };

  const productsDataOnError = (error) => {
    console.log(
      "Pefrom side effect on error (like setting an error) => ",
      error
    );
  };

  const {
    isLoading,
    data,
    isError,
    error,
    isRefetching,
    isRefetchError,
    isPreviousData,
    refetch,
  } = useProductsData(
    { name, pageNo, limit },
    productsDataOnSuccess,
    productsDataOnError
  );

  // As "enabled" option in hook is set to "false" need to manually refetch. Otherwise whenever any of the arguments of "useProductsData(....)" changes it will automatically refetch
  React.useEffect(() => {
    refetch({ cancelRefetch: true });
  }, [pageNo]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.searchbox}>
          <input
            id={`search-${pageNo}`}
            className={styles.searchinput}
            type="text"
            value={name}
            onChange={(e) => {
              setName(e.target.value);
              // Reset the page No
              setPageNo(1);
            }}
            placeholder="Search electronic gadgets ...."
          />
          {/* If "cancelRefetch" is true, then the current request will be cancelled before a new request is made */}
          <button
            className={styles.searchbtn}
            onClick={() => refetch({ cancelRefetch: true })}
          >
            <HiSearch />
          </button>
        </div>
        {/* "isRefetching" Is TRUE whenever a background refetch is in-flight, which does not include initial loading "isLoading". Is the same as `isFetching && !isLoading` */}
        {isLoading && (
          <h2>
            <BounceLoader
              color={color}
              loading={loading}
              size={150}
              aria-label="Loading Spinner"
              data-testid="loader"
            />
          </h2>
        )}
        {(isError || isRefetchError) && (
          <h2>Oops ! An error occurred while loading.</h2>
        )}
        {data?.productsData && data?.productsData.length < 1 && (
          <h2>Oops ! No data available</h2>
        )}

        {/* "isRefetching" is useful in `refetching` the data or `fetching more data` like using paginated queries or inifinite queries. */}
        {isRefetching && (
          <h2>
            <BounceLoader
              color={color}
              loading={loading}
              size={70}
              aria-label="Loading Spinner"
              data-testid="loader"
            />
          </h2>
        )}
        {data?.productsData && data?.productsData.length > 0 && (
          <div className={styles.grid}>
            {data?.productsData.map((gadget, i) => (
              // <Link
              //   key={gadget.id + i.toString()}
              //   href={{
              //     pathname: "/product",
              //     query: { productName: gadget.product_name },
              //   }}
              // >
              <a
                key={gadget.id + i.toString()}
                href={`/product?productName=${gadget.product_name}`}
                style={{ textDecoration: "none" }}
              >
                <div className={styles.card}>
                  <h2>{gadget.brand} &rarr;</h2>
                  <img
                    alt=" Product Image"
                    src={gadget.picture_url}
                    className={styles.searchImage}
                  />
                  <p className={styles.product_name}>{gadget.product_name}.</p>
                </div>
              </a>
              // </Link>
            ))}
          </div>
        )}
        {data?.productsData && data?.productsData.length > 0 && (
          <div className={styles.pagination_container}>
            <a
              href={`#search-${pageNo}`}
              className={`${styles.pagination_number} ${
                pageNo === 1 && styles.pagination_disabled
              } ${styles.arrow}`}
              onClick={() => {
                setPageNo((old) => Math.max(old - 1, 1));
              }}
            >
              <svg width="24" height="24">
                <use xlinkHref="#left" />
              </svg>
              <span className={styles.arrow_text}>Prev</span>
            </a>

            <div
              className={`${styles.pagination_number} ${styles.pagination_active}`}
            >
              {pageNo}
            </div>

            <a
              href={`#search-${pageNo}`}
              className={`${styles.pagination_number} ${styles.arrow} ${
                !data?.hasMore && styles.pagination_disabled
              } ${styles.arrow}`}
              onClick={() => {
                if (!isPreviousData && data.hasMore) {
                  setPageNo((old) => old + 1);
                }
              }}
            >
              <span className={styles.arrow_text}>Next</span>
              <svg width="24" height="24">
                <use xlinkHref="#right" />
              </svg>
            </a>
          </div>
        )}
        <svg className={styles.hide}>
          <symbol
            id="left"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M15 19l-7-7 7-7"
            ></path>
          </symbol>
          <symbol
            id="right"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M9 5l7 7-7 7"
            ></path>
          </symbol>
        </svg>
      </main>
    </div>
  );
}
